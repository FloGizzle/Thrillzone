<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src='https://api.mapbox.com/mapbox-gl-js/v3.1.2/mapbox-gl.js'></script>
        <link href='https://api.mapbox.com/mapbox-gl-js/v3.1.2/mapbox-gl.css' rel='stylesheet' />
        <style>   
            html, body{
                margin: 0;
                padding: 0;
                height: 100svh;
                width: 100svw;
                overflow: hidden;
            }

            #map{
                width: 100svw;
                height: 100svh;
            }
        </style>
    </head>

    <body>
        <div id='map'></div> 

        <script>

//Variables
const rect = document.getElementById('map').getBoundingClientRect();
const viewportX = rect.x;
const viewportY = rect.bottom;
const shiftScreenY = 0.25 * viewportY;
const shiftScreenX = 0.5 * viewportX;
let lastCenter = [173.21106573769924, -41.81657804512245];

//Load map
//Call in mapbox to load map
mapboxgl.accessToken = 'pk.eyJ1IjoidGhyaWxsem9uZW56IiwiYSI6ImNsczN3aTU1YzBrbnMyanFqY3d2a2pwdW0ifQ.HgnJMH6GCfnB4zagtanLSw';
const map = new mapboxgl.Map({
    container: 'map', // container ID
    style: 'mapbox://styles/thrillzonenz/clt5aqt2o00df01oie2kkg0ou',
    center: [168.66309991673293, -45.03357271974072], // starting position [lng, lat]
    zoom: 12, // starting zoom
});
//Let wix know when map is loaded
map.on('load', () => {
    if (map.loaded()) window.parent.postMessage('mapLoaded', "*");
});

map.on('click', () => {
    window.parent.postMessage('zoomOut', "*");
});

//Get data from wix, this is general so here check what the info is and do with it what you will
/*
    types:
    - List[List[unique id, url for icon, coordinates]]
    - String layerID 
*/
window.onmessage = (event) => {
  	if(Array.isArray(event.data))
  	{
    	makeMarkers(event.data);
  		return null;
  	}
  	console.log(event.data);
    switch (event.data) {
        case "all":
            OpenAll();
            break;
        case "L0":
            OpenLayer(event.data);
            break;
      case "L1":
        	OpenLayer(event.data);
        	break;
      case "L2":
        	OpenLayer(event.data);
        	break;
      case "L3":
        	OpenLayer(event.data);
        	break;
      	case "L4":
        	OpenLayer(event.data);
        	break;
        case 'Geolocate':
            ShowUser();
        default:
            console.log("somethings wrong");
            break;
    }
};

//Make markers from send in list
function makeMarkers(list) {
    for (let i = 0; i < list.length; i++) {

        const marker = list[i];
        const el = document.createElement('img');

        el.id = marker[0];
      	el.className = 'marker';
        el.src = marker[1];
        el.style.width = '50px';
        el.style.height = '50px';
        el.style.backgroundSize = '100%';
        //el.style.display = 'none';
        el.style.zIndex = 1;

        // Add markers to the map.
        new mapboxgl.Marker(el)
            .setLngLat(marker[2])
            .addTo(map);

        el.addEventListener('click', (event) => {
            event.stopPropagation();
            window.parent.postMessage(el.id, "*");
            CentralizeToMarker(marker[2]);
        });
    }
}

//Open specific layer
function OpenLayer(layerID)
{
    let elements = document.querySelectorAll('img[class^="marker"]');
    elements.forEach(function(el) {
        if(el.id.includes(layerID)) 
            el.style.display = 'block';
        else
            el.style.display = 'none';
    });


}

//Shows all layers
function OpenAll()
{
    let elements = document.querySelectorAll(`img[class^="marker"]`);
    elements.forEach(function(el) {
        el.style.display = 'block';
    });
}

//Fly to marker and centralize it
function CentralizeToMarker(lnglat) {
    let zoom = map.getZoom();
    lastCenter = [lnglat[0], lnglat[1]];

    map.flyTo({
        center: [lnglat[0], lnglat[1]],
        offset: [shiftScreenX, -shiftScreenY],
        speed: 0.8,
        curve: .6,
        zoom: 18
    });
}

function ShowUser()
{
    navigator.geolocation;

    const succes = (poistion)=>{
        console.log('Getting position');
    };

    const error = () =>{
        console.log('Didnt get location');
    }


    navigator.geolocation.getCurrentPosition(succes, error);

    // Add geolocate control to the map.
    map.addControl(
        new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: !0
            },
            // When active the map will receive updates to the device's location as it changes.
            trackUserLocation: !0,
            // Draw an arrow next to the location dot to indicate which direction the device is heading.
            showUserHeading: !0
        })
    );
}

        </script>  
    </body>
</html>