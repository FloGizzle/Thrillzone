import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill
import os
import re

class ExcelComparisonApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Excel Comparison Tool")
        self.root.geometry("800x600")
        
        # Create main frame
        self.main_frame = ttk.Frame(root, padding="10")
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create top frame for file selection
        self.top_frame = ttk.Frame(self.main_frame)
        self.top_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Button(self.top_frame, text="Select Excel File", command=self.select_file).pack(side=tk.LEFT)
        
        # Create bottom frame for process button and status
        self.bottom_frame = ttk.Frame(self.main_frame)
        self.bottom_frame.pack(fill=tk.X, side=tk.BOTTOM, pady=(10, 0))
        
        # Process button
        self.process_btn = ttk.Button(self.bottom_frame, text="Process", command=self.process_file, state='disabled')
        self.process_btn.pack(side=tk.LEFT)
        
        # Status label
        self.status_var = tk.StringVar()
        ttk.Label(self.bottom_frame, textvariable=self.status_var).pack(side=tk.LEFT, padx=(10, 0))
        
        # Create notebook for sheet tabs
        self.notebook = ttk.Notebook(self.main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        self.notebook.bind('<<NotebookTabChanged>>', self.on_tab_changed)
        
        # Dictionary to store tab frames and their associated widgets
        self.tab_frames = {}
        self.column_selections = {}
        
        self.workbook = None
        self.filepath = None

    
    def create_tab_content(self, sheet_name):
        """Create content for a new tab"""
        # Create main tab frame
        tab_frame = ttk.Frame(self.notebook, padding="5")
        
        # Create upper frame for column selection
        column_frame = ttk.LabelFrame(tab_frame, text="Column Selection", padding="5")
        column_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # First comparison pair (left side)
        first_pair_frame = ttk.Frame(column_frame)
        first_pair_frame.pack(side=tk.LEFT, padx=10)
        
        ttk.Label(first_pair_frame, text="First Comparison").pack()
        ttk.Label(first_pair_frame, text="ID Column:").pack()
        id1_combo = ttk.Combobox(first_pair_frame, state='readonly', width=15)
        id1_combo.pack(pady=2)
        
        ttk.Label(first_pair_frame, text="Amount Column:").pack()
        amount1_combo = ttk.Combobox(first_pair_frame, state='readonly', width=15)
        amount1_combo.pack(pady=2)
        
        # Second comparison pair (right side)
        second_pair_frame = ttk.Frame(column_frame)
        second_pair_frame.pack(side=tk.LEFT, padx=10)
        
        ttk.Label(second_pair_frame, text="Second Comparison").pack()
        ttk.Label(second_pair_frame, text="ID Column:").pack()
        id2_combo = ttk.Combobox(second_pair_frame, state='readonly', width=15)
        id2_combo.pack(pady=2)
        
        ttk.Label(second_pair_frame, text="Amount Column:").pack()
        amount2_combo = ttk.Combobox(second_pair_frame, state='readonly', width=15)
        amount2_combo.pack(pady=2)
        
        # Create preview frame
        preview_frame = ttk.LabelFrame(tab_frame, text="Data Preview", padding="5")
        preview_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Create outer frame to constrain width
        outer_frame = ttk.Frame(preview_frame)
        outer_frame.pack(fill=tk.BOTH, expand=True)
        
        # Add canvas and scrollable frame
        preview_canvas = tk.Canvas(outer_frame)
        scrollable_frame = ttk.Frame(preview_canvas)
        
        # Create Treeview with scrollbars
        tree = ttk.Treeview(scrollable_frame)
        vsb = ttk.Scrollbar(scrollable_frame, orient="vertical", command=tree.yview)
        hsb = ttk.Scrollbar(outer_frame, orient="horizontal", command=preview_canvas.xview)
        
        # Configure scrolling
        tree.configure(yscrollcommand=vsb.set)
        preview_canvas.configure(xscrollcommand=hsb.set)
        
        # Layout
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        preview_canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
        hsb.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Create window in canvas
        preview_canvas.create_window((0, 0), window=scrollable_frame, anchor=tk.NW)
        
        # Configure canvas scrolling
        def configure_scroll_region(event):
            preview_canvas.configure(scrollregion=preview_canvas.bbox("all"))
        
        scrollable_frame.bind("<Configure>", configure_scroll_region)
        
        # Bind canvas to mousewheel for horizontal scrolling
        def on_mousewheel(event):
            preview_canvas.xview_scroll(int(-1 * (event.delta / 120)), "units")
        
        preview_canvas.bind_all("<Shift-MouseWheel>", on_mousewheel)
        
        # Store widgets in dictionaries
        self.tab_frames[sheet_name] = {
            'frame': tab_frame,
            'id1_combo': id1_combo,
            'amount1_combo': amount1_combo,
            'id2_combo': id2_combo,
            'amount2_combo': amount2_combo,
            'tree': tree,
            'canvas': preview_canvas,
            'scrollable_frame': scrollable_frame
        }
        
        # Bind column selection events
        for combo in [id1_combo, amount1_combo, id2_combo, amount2_combo]:
            combo.bind('<<ComboboxSelected>>', lambda e, s=sheet_name: self.on_column_selected(s))
        
        # Update width constraint after window is shown
        def update_width(event=None):
            preview_canvas.configure(width=outer_frame.winfo_width())
        
        tab_frame.bind('<Configure>', update_width)
        
        return tab_frame
        
    def on_tab_changed(self, event):
        """Handle tab change events"""
        current_tab = self.notebook.select()
        sheet_name = self.notebook.tab(current_tab, "text")
        
        try:
            # Get the widgets for this tab
            tab_widgets = self.tab_frames[sheet_name]
            tree = tab_widgets['tree']
            
            # Read the sheet data
            wb = load_workbook(self.filepath, data_only=True)
            ws = wb[sheet_name]
            
            # Get available columns
            max_col = ws.max_column
            columns = [self.get_column_letter(i) for i in range(max_col)]
            
            # Clear existing data
            tree.delete(*tree.get_children())
            
            # Collect data to calculate max widths
            data = []
            for row in ws.iter_rows(values_only=True):
                data.append([str(cell) if cell is not None else "" for cell in row])
                if len(data) > 100:  # Limit to first 100 rows for performance
                    break
            
            # Configure columns
            tree["columns"] = columns
            tree["show"] = "headings"
            
            # Calculate and set column widths based on content
            for idx, col in enumerate(columns):
                max_width = len(col)  # Start with header width
                for row in data:
                    if idx < len(row):  # Make sure index exists
                        cell_width = len(str(row[idx]))
                        max_width = max(max_width, cell_width)
                
                # Set column width (multiply by average character width and add padding)
                pixel_width = max_width * 8 + 20  # Approximate pixels per character + padding
                pixel_width = min(pixel_width, 300)  # Cap maximum width
                pixel_width = max(pixel_width, 50)   # Minimum width
                
                tree.heading(col, text=col)
                tree.column(col, width=pixel_width, minwidth=50)
            
            # Add data to tree
            for row in data:
                tree.insert("", "end", values=row)
            
            wb.close()
            
        except Exception as e:
            messagebox.showerror("Error", f"Error loading sheet data: {str(e)}")

    def load_sheet_data(self, sheet_name):
        """Load data for the selected sheet"""
        if not self.workbook or not sheet_name:
            return
            
        try:
            # Get the widgets for this tab
            tab_widgets = self.tab_frames[sheet_name]
            
            # Read the sheet data
            wb = load_workbook(self.filepath, data_only=True)
            ws = wb[sheet_name]
            
            # Get available columns
            max_col = ws.max_column
            columns = [self.get_column_letter(i) for i in range(max_col)]
            
            # Update column dropdowns
            for combo in [tab_widgets['id1_combo'], tab_widgets['amount1_combo'], 
                        tab_widgets['id2_combo'], tab_widgets['amount2_combo']]:
                combo['values'] = columns
            
            # Load saved column selections if they exist
            if sheet_name in self.column_selections:
                selections = self.column_selections[sheet_name]
                tab_widgets['id1_combo'].set(selections.get('id1', ''))
                tab_widgets['amount1_combo'].set(selections.get('amount1', ''))
                tab_widgets['id2_combo'].set(selections.get('id2', ''))
                tab_widgets['amount2_combo'].set(selections.get('amount2', ''))
            
            # Update preview
            tree = tab_widgets['tree']
            tree.delete(*tree.get_children())
            
            # Configure columns
            tree["columns"] = columns
            tree["show"] = "headings"
            
            # Collect all data to calculate max widths
            data = []
            for row in ws.iter_rows(values_only=True):
                data.append([str(cell) if cell is not None else "" for cell in row])
                if len(data) > 100:  # Limit to first 100 rows for performance
                    break
                    
            # Calculate max width for each column based on data and header
            for idx, col in enumerate(columns):
                max_width = len(col)  # Start with header width
                for row in data:
                    if idx < len(row):  # Make sure index exists
                        cell_width = len(str(row[idx]))
                        max_width = max(max_width, cell_width)
                
                # Set column width (multiply by average character width and add padding)
                pixel_width = max_width * 8 + 20  # Approximate pixels per character + padding
                pixel_width = min(pixel_width, 300)  # Cap maximum width
                pixel_width = max(pixel_width, 50)   # Minimum width
                
                tree.heading(col, text=col)
                tree.column(col, width=pixel_width, minwidth=50)
            
            # Add data to tree
            for row in data:
                tree.insert("", "end", values=row)
            
            wb.close()
            
        except Exception as e:
            messagebox.showerror("Error", f"Error loading sheet data: {str(e)}")

    def on_frame_configure(self, event=None):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def on_canvas_configure(self, event):
        # Update the width of the frame to fill the canvas
        self.canvas.itemconfig(self.canvas_frame, width=event.width)

    def get_column_letter(self, index):
        """Convert column index to Excel column letter (A, B, C, ..., Z, AA, AB, etc.)"""
        result = ""
        while True:
            index, remainder = divmod(index, 26)
            result = chr(65 + remainder) + result
            if not index:
                break
            index -= 1
        return result

    def update_preview(self, df):
        # Clear existing items
        self.preview_tree.delete(*self.preview_tree.get_children())
        
        # Configure columns
        self.preview_tree["columns"] = [self.get_column_letter(i) for i in range(len(df.columns))]
        
        # Configure column headings
        for i in range(len(df.columns)):
            col_letter = self.get_column_letter(i)
            self.preview_tree.heading(f"#{i+1}", text=col_letter)  # First column
            self.preview_tree.heading(col_letter, text=col_letter)
            self.preview_tree.column(col_letter, width=100, minwidth=100)
        
        # Add data
        for i, row in df.head(100).iterrows():  # Show first 100 rows
            values = row.values.tolist()
            self.preview_tree.insert("", "end", values=values)

    def save_current_sheet_columns(self):
        """Save the current column selections for the current sheet"""
        current_sheet = self.sheet_var.get()
        if current_sheet and all([
            self.id1_var.get(),
            self.amount1_var.get(),
            self.id2_var.get(),
            self.amount2_var.get()
        ]):
            self.sheet_columns[current_sheet] = {
                'id1': self.id1_var.get(),
                'amount1': self.amount1_var.get(),
                'id2': self.id2_var.get(),
                'amount2': self.amount2_var.get()
            }
            # Mark this sheet as configured
            self.configured_sheets.add(current_sheet)

    def clear_column_selections(self):
        """Clear all column selection dropdowns"""
        self.id1_var.set('')
        self.amount1_var.set('')
        self.id2_var.set('')
        self.amount2_var.set('')
        
        for combo in [self.id1_combo, self.id2_combo, self.amount1_combo, self.amount2_combo]:
            combo['values'] = []
            combo['state'] = 'disabled'

    def load_sheet_columns(self, sheet_name):
        """Load saved column selections for the given sheet"""
        try:
            # First read the Excel file
            wb = load_workbook(self.filepath, data_only=True)
            ws = wb[sheet_name]
            
            # Generate column letters based on worksheet dimensions
            max_col = ws.max_column
            columns = [self.get_column_letter(i) for i in range(max_col)]
            
            if sheet_name in self.sheet_columns:
                # Update the dropdowns with available columns
                for combo in [self.id1_combo, self.id2_combo, self.amount1_combo, self.amount2_combo]:
                    combo['values'] = columns
                    combo['state'] = 'readonly'
                
                # Set the previously selected values
                saved_columns = self.sheet_columns[sheet_name]
                self.id1_var.set(saved_columns['id1'])
                self.amount1_var.set(saved_columns['amount1'])
                self.id2_var.set(saved_columns['id2'])
                self.amount2_var.set(saved_columns['amount2'])
                
                self.process_btn['state'] = 'normal'
            else:
                # New sheet - clear previous selections
                self.clear_column_selections()
                
                # Enable dropdowns with new column options
                for combo in [self.id1_combo, self.id2_combo, self.amount1_combo, self.amount2_combo]:
                    combo['values'] = columns
                    combo['state'] = 'readonly'
                
                self.process_btn['state'] = 'disabled'
            
            wb.close()  # Close the workbook to free resources
                
        except Exception as e:
            messagebox.showerror("Error", f"Error loading sheet columns: {str(e)}")
            self.clear_column_selections()

    def on_sheet_selected(self, event=None):
        if self.sheet_var.get():
            try:
                # Save current sheet's columns before switching
                self.save_current_sheet_columns()
                
                # Load or initialize the new sheet's columns
                self.load_sheet_columns(self.sheet_var.get())
                
                # Update preview
                wb = load_workbook(self.filepath, data_only=True)
                ws = wb[self.sheet_var.get()]
                
                # Get data from worksheet
                data = []
                for row in ws.rows:
                    row_data = []
                    for cell in row:
                        value = cell.value if cell.value is not None else ""
                        row_data.append(str(value))
                    data.append(row_data)
                
                # Create DataFrame for preview
                columns = [self.get_column_letter(i) for i in range(len(data[0]))]
                df = pd.DataFrame(data[1:], columns=columns)
                
                self.update_preview(df)
                wb.close()
                
                # Update status message
                if self.sheet_var.get() in self.configured_sheets:
                    self.status_var.set(f"Loaded previously configured columns for sheet '{self.sheet_var.get()}'")
                else:
                    self.status_var.set(f"Please select columns for sheet '{self.sheet_var.get()}'")
                    
            except Exception as e:
                messagebox.showerror("Error", f"Error selecting sheet: {str(e)}")

    def on_column_selected(self, sheet_name):
        """Handle column selection changes"""
        widgets = self.tab_frames[sheet_name]
        
        # Get current selections
        current_selections = {
            'id1': widgets['id1_combo'].get(),
            'amount1': widgets['amount1_combo'].get(),
            'id2': widgets['id2_combo'].get(),
            'amount2': widgets['amount2_combo'].get()
        }
        
        # Save selections for current sheet
        self.column_selections[sheet_name] = current_selections
        
        # If this is the first sheet to have all columns selected, propagate to other sheets
        if all(current_selections.values()):
            first_sheet = self.workbook.sheetnames[0]
            if sheet_name == first_sheet:
                self.propagate_column_selections(current_selections)
            
        # Enable process button if at least one sheet has all columns selected
        for selections in self.column_selections.values():
            if all(selections.values()):
                self.process_btn['state'] = 'normal'
                return
        
        self.process_btn['state'] = 'disabled'

    def propagate_column_selections(self, selections):
        """Propagate column selections to all tabs if the columns exist"""
        try:
            # For each sheet
            for sheet_name in self.workbook.sheetnames:
                # Skip the first sheet as it's already set
                if sheet_name == self.workbook.sheetnames[0]:
                    continue
                
                # Get the widgets for this tab
                tab_widgets = self.tab_frames[sheet_name]
                
                # Get available columns for this sheet
                wb = load_workbook(self.filepath, data_only=True)
                ws = wb[sheet_name]
                max_col = ws.max_column
                available_columns = [self.get_column_letter(i) for i in range(max_col)]
                wb.close()
                
                # Check if all selected columns exist in this sheet
                if all(col in available_columns for col in selections.values()):
                    # Update the comboboxes
                    tab_widgets['id1_combo'].set(selections['id1'])
                    tab_widgets['amount1_combo'].set(selections['amount1'])
                    tab_widgets['id2_combo'].set(selections['id2'])
                    tab_widgets['amount2_combo'].set(selections['amount2'])
                    
                    # Save the selections
                    self.column_selections[sheet_name] = selections.copy()
                    
                    # Update status
                    self.status_var.set(f"Column selections propagated to sheet '{sheet_name}'")
                else:
                    self.status_var.set(f"Could not propagate columns to sheet '{sheet_name}' - different column structure")
                
        except Exception as e:
            messagebox.showwarning("Warning", f"Error propagating column selections: {str(e)}")

    def select_file(self):
        """Handle file selection"""
        self.filepath = filedialog.askopenfilename(
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        if self.filepath:
            try:
                # Clear existing tabs
                for tab in self.notebook.tabs():
                    self.notebook.forget(tab)
                self.tab_frames.clear()
                self.column_selections.clear()
                
                # Load workbook
                self.workbook = load_workbook(self.filepath, data_only=True)
                
                # Create tabs for each sheet
                for sheet_name in self.workbook.sheetnames:
                    tab_frame = self.create_tab_content(sheet_name)
                    self.notebook.add(tab_frame, text=sheet_name)
                
                # Load first sheet
                if self.workbook.sheetnames:
                    self.load_sheet_data(self.workbook.sheetnames[0])
                
                self.status_var.set("File loaded successfully. Please select columns for each sheet.")
                self.process_btn['state'] = 'disabled'
                
            except Exception as e:
                messagebox.showerror("Error", f"Error loading file: {str(e)}")

    def read_excel_raw(self, filepath, sheet_name):
        """Read Excel file with all cells as raw values"""
        try:
            # Load workbook in read-only mode
            wb = load_workbook(filename=filepath, data_only=True, read_only=True)
            ws = wb[sheet_name]
            
            # Get all values including empty cells
            data = []
            for row in ws.rows:
                row_data = []
                for cell in row:
                    # Convert cell value to string, handle None/empty cells
                    value = cell.value if cell.value is not None else ""
                    row_data.append(str(value))
                data.append(row_data)
            
            # Ensure we have data
            if not data:
                return pd.DataFrame()  # Return empty DataFrame if no data
                
            # Get number of columns from first row
            num_cols = len(data[0])
            
            # Create column labels (A, B, C, etc.)
            columns = [self.get_column_letter(i) for i in range(num_cols)]
            
            # Create DataFrame with first row as data (not headers)
            df = pd.DataFrame(data, columns=columns)
            
            wb.close()  # Close workbook to free resources
            return df
        
        except Exception as e:
            messagebox.showerror("Error", f"Error reading Excel file: {str(e)}")
            return pd.DataFrame()  # Return empty DataFrame on error
    
    def clean_value(self, value):
        """Clean up a value by removing currency symbols and standardizing number format"""
        if value is None:
            return None
            
        # Convert to string
        value = str(value)
        
        # Remove specific patterns first
        value = value.replace("US $", "")  # Remove "US $"
        
        # Special handling for comma as decimal separator
        # If the comma is followed by numbers, treat it as a decimal point
        if ',' in value:
            parts = value.split(',')
            if len(parts) == 2:
                # If there are exactly two parts and the second part is numeric
                if parts[1].replace('0', '').strip():  # Check if there's any non-zero digit
                    # Replace comma with period for decimal
                    value = f"{parts[0]}.{parts[1]}"
                else:
                    # If it's just zeros after comma, remove the decimal part
                    value = parts[0]
        
        # Remove currency symbols, spaces, and other non-numeric characters
        # Keep only numbers, decimal points, and minus signs
        cleaned = re.sub(r'[^0-9.-]', '', value)
        
        try:
            # Convert to float
            num = float(cleaned)
            
            # Round to 1 decimal place if it has decimals
            if not num.is_integer():
                return round(num, 1)
            
            # Return as integer if it's a whole number
            return int(num)
        except ValueError:
            return value  # Return original value if conversion fails

    def process_file(self):
        """Process the Excel file with the selected columns"""
        try:
            if not self.filepath or not self.workbook:
                messagebox.showwarning("Warning", "Please select a file first")
                return
            
            # Create output workbook
            output_path = os.path.splitext(self.filepath)[0] + "_processed.xlsx"
            wb = load_workbook(self.filepath, data_only=True)
            
            # Process each sheet that has column selections
            sheets_processed = 0
            for sheet_name, selections in self.column_selections.items():
                if not all(selections.values()):
                    continue
                    
                try:
                    ws = wb[sheet_name]
                    
                    # Get column letters
                    id1_col = selections['id1']
                    amount1_col = selections['amount1']
                    id2_col = selections['id2']
                    amount2_col = selections['amount2']
                    
                    # Define fill colors
                    red_fill = PatternFill(start_color='FFFF0000', end_color='FFFF0000', fill_type='solid')
                    green_fill = PatternFill(start_color='FF00FF00', end_color='FF00FF00', fill_type='solid')
                    orange_fill = PatternFill(start_color='FFFFA500', end_color='FFFFA500', fill_type='solid')
                    
                    # Function to clean IDs - keep only alphanumeric characters and convert to lowercase
                    def clean_id(id_value):
                        if id_value is None:
                            return ''
                        # Convert to string, remove any non-alphanumeric characters, and convert to lowercase
                        return ''.join(char for char in str(id_value) if char.isalnum()).lower()
                    
                    # First pass: Create a mapping of id2 values to their data
                    id2_mapping = {}
                    for row2 in range(1, ws.max_row + 1):
                        id2_raw = ws[f"{id2_col}{row2}"].value
                        id2 = clean_id(id2_raw)
                        if id2 and id2 != 'id':  # Skip header row - now case insensitive check
                            amount2 = ws[f"{amount2_col}{row2}"].value
                            id2_mapping[id2] = {
                                'row': row2,
                                'amount': amount2
                            }

                    # Second pass: Clear all colors first
                    for row in range(1, ws.max_row + 1):
                        for col in [id1_col, amount1_col, id2_col, amount2_col]:
                            if ws[f"{col}{row}"].fill:
                                ws[f"{col}{row}"].fill = PatternFill(fill_type=None)
                    
                    # Third pass: Process and apply color highlighting without modifying data
                    for row in range(1, ws.max_row + 1):
                        id1_raw = ws[f"{id1_col}{row}"].value
                        id1 = clean_id(id1_raw)
                        if not id1 or id1 == 'id':  # Skip empty rows and header - now case insensitive check
                            continue
                            
                        amount1 = ws[f"{amount1_col}{row}"].value
                        
                        # If we find a match in id2_mapping
                        if id1 in id2_mapping:
                            match_data = id2_mapping[id1]
                            
                            # Clean and compare values
                            clean_amount1 = self.clean_value(amount1)
                            clean_amount2 = self.clean_value(match_data['amount'])
                            
                            if clean_amount1 == clean_amount2:
                                # Matching amounts - green
                                ws[f"{id1_col}{row}"].fill = green_fill
                                ws[f"{amount1_col}{row}"].fill = green_fill
                            else:
                                # Different amounts - orange
                                ws[f"{id1_col}{row}"].fill = orange_fill
                                ws[f"{amount1_col}{row}"].fill = orange_fill
                        else:
                            # No match found - red
                            ws[f"{id1_col}{row}"].fill = red_fill
                            ws[f"{amount1_col}{row}"].fill = red_fill
                    
                    # Fourth pass: Color the id2 column based on matches
                    for row in range(1, ws.max_row + 1):
                        id2_raw = ws[f"{id2_col}{row}"].value
                        id2 = clean_id(id2_raw)
                        if not id2 or id2 == 'id':  # Skip empty rows and header - now case insensitive check
                            continue
                            
                        # Check if id2 exists in any id1 
                        id1_found = False
                        for row1 in range(1, ws.max_row + 1):
                            id1_raw = ws[f"{id1_col}{row1}"].value
                            id1 = clean_id(id1_raw)
                            if id1 and id1 != 'id' and id1 == id2:  # Now case insensitive check
                                id1_found = True
                                amount1 = ws[f"{amount1_col}{row1}"].value
                                amount2 = ws[f"{amount2_col}{row}"].value
                                
                                # Clean and compare values
                                clean_amount1 = self.clean_value(amount1)
                                clean_amount2 = self.clean_value(amount2)
                                
                                if clean_amount1 == clean_amount2:
                                    # Matching amounts - green
                                    ws[f"{id2_col}{row}"].fill = green_fill
                                    ws[f"{amount2_col}{row}"].fill = green_fill
                                else:
                                    # Different amounts - orange
                                    ws[f"{id2_col}{row}"].fill = orange_fill
                                    ws[f"{amount2_col}{row}"].fill = orange_fill
                                break
                        
                        if not id1_found:
                            # No match found - red
                            ws[f"{id2_col}{row}"].fill = red_fill
                            ws[f"{amount2_col}{row}"].fill = red_fill
                    
                    sheets_processed += 1
                    self.status_var.set(f"Processing sheet {sheets_processed}/{len(self.column_selections)}: {sheet_name}")
                    self.root.update()
                    
                except Exception as e:
                    messagebox.showwarning("Warning", f"Error processing sheet {sheet_name}: {str(e)}")
                    continue
            
            # Save the processed file
            wb.save(output_path)
            wb.close()
            
            if sheets_processed > 0:
                messagebox.showinfo("Success", 
                    f"Processing complete!\n"
                    f"Processed {sheets_processed} sheet(s)\n"
                    f"Saved as: {output_path}")
                self.status_var.set(f"Processing complete! Processed {sheets_processed} sheet(s)")
            else:
                messagebox.showwarning("Warning", "No sheets were processed. Please configure at least one sheet.")
            
        except Exception as e:
            messagebox.showerror("Error", f"Error processing file: {str(e)}")

def main():
    root = tk.Tk()
    app = ExcelComparisonApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()